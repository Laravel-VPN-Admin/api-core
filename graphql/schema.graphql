"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"Object of inputs with details for ordering columns"
input OrderByClause {
    "Name of field for sorting"
    field: String!
    "Sorting direction"
    order: SortOrder!
}

"Array if order of sorting types"
enum SortOrder {
    ASC
    DESC
}

type Query {
    "Get system status for dashboard"
    stats: Stats! @middleware(checks: ["auth:api"])

    "Get details about current authorized user"
    me: User! @middleware(checks: ["auth:api"])

    "Get list of all users with additinal filters"
    users(
        orderBy: _ @orderBy(columns: ["id","name","email","email_verified_at","created_at","updated_at"])
        where: _ @whereConditions(columns: ["id","name","email","email_verified_at","created_at","updated_at"])
    ): [User!] @paginate(defaultCount: 10) @middleware(checks: ["auth:api"])
    "Get single user by unique ID"
    user(id: ID @eq): User @find @middleware(checks: ["auth:api"])

    "Get list of all servers with additinal filters"
    servers(
        orderBy: _ @orderBy(columns: ["id","hostname","ipv4","ipv6","configuration_id","created_at","updated_at"])
        where: _ @whereConditions(columns: ["id","hostname","ipv4","ipv6","configuration_id","created_at","updated_at"])
    ): [Server!] @paginate(defaultCount: 10) @middleware(checks: ["auth:api"])
    "Get single server by unique ID"
    server(id: ID @eq): Server @find @middleware(checks: ["auth:api"])

    "Get list of all server configurations"
    configurations(
        orderBy: _ @orderBy(columns: ["id","type_id","created_at","updated_at"])
        where: _ @whereConditions(columns: ["id","type_id","created_at","updated_at"])
    ): [Configuration!] @paginate(defaultCount: 10) @middleware(checks: ["auth:api"])
    "Get single configuration by unique ID"
    configuration(id: ID @eq): Configuration @find @middleware(checks: ["auth:api"])

    "Get list of all groups with additinal filters"
    groups(
        orderBy: _ @orderBy(columns: ["id","name","created_at","updated_at"])
        where: _ @whereConditions(columns: ["id","name","created_at","updated_at"])
    ): [Group!] @paginate(defaultCount: 10) @middleware(checks: ["auth:api"])
    "Get single group by unique ID"
    group(id: ID @eq): Group @find @middleware(checks: ["auth:api"])

    "Get list of all logs with additinal filters"
    logs(
        orderBy: _ @orderBy(columns: ["id","server_id","user_id","created_at","updated_at"])
        where: _ @whereConditions(columns: ["id","server_id","user_id","created_at","updated_at"])
    ): [Log!] @paginate(defaultCount: 10) @middleware(checks: ["auth:api"])
    "Get single log message by unique ID"
    log(id: ID @eq): Log @find @middleware(checks: ["auth:api"])
}

type Mutation {
    "Login user"
    login(input: UserLogin! @spread): Token
    "Refresh token of authorized user"
    refresh: Token @middleware(checks: ["auth:api"])

    "Create new user"
    createUser(input: UserCreateInput! @spread): User! @create @middleware(checks: ["auth:api"])
    "Update user details"
    updateUser(id: ID!, input: UserUpdateInput! @spread): User! @update @middleware(checks: ["auth:api"])
    "Delete user"
    deleteUser(id: ID!): User @delete @middleware(checks: ["auth:api"])

    "Create new group"
    createGroup(input: GroupCreateInput! @spread): Group! @create @middleware(checks: ["auth:api"])
    "Update group details"
    updateGroup(id: ID!, input: GroupUpdateInput! @spread): Group! @update @middleware(checks: ["auth:api"])
    "Delete group"
    deleteGroup(id: ID!): Group @delete @middleware(checks: ["auth:api"])

    "Create new server"
    createServer(input: ServerCreateInput! @spread): Server! @create @middleware(checks: ["auth:api"])
    "Update server details"
    updateServer(id: ID!, input: ServerUpdateInput! @spread): Server! @update @middleware(checks: ["auth:api"])
    "Delete server"
    deleteServer(id: ID!): Server @delete @middleware(checks: ["auth:api"])

    "Create new log message"
    createLog(input: LogCreateInput! @spread): Log! @create @middleware(checks: ["auth:api"]) @broadcast(subscription: "logCreated")
    "Update log message"
    updateLog(id: ID!, input: LogUpdateInput! @spread): Log! @update @middleware(checks: ["auth:api"])
    "Delete log message"
    deleteLog(id: ID!): Log @delete @middleware(checks: ["auth:api"])
}

type Subscription {
    logCreated(id: ID): Log!
}

"User login details"
input UserLogin {
    email: String!
    password: String!
}

"Information about token"
type Token {
    token: String
    message: String
}

"Details about current installation"
type Stats {
    users_count: Int!
    groups_count: Int!
    servers_count: Int!
}

"Object with all required details about user"
type User {
    "Unique ID of user"
    id: ID!
    "Full name of user"
    name: String!
    "Email address, should be unique, will be user for authorization"
    email: String!
    "Object path in Active Directory or OpenLDAP"
    object: String
    "Array of groups in which the user is a member of"
    groups: [Group!]
    "When record was created"
    created_at: DateTime
    "When record was updated in last time"
    updated_at: DateTime
}

input GroupsInput {
    sync: [ID!]
    connect: [ID!]
    disconnect: [ID!]
}

"List of fields which can be filled on user creating stage"
input UserCreateInput {
    "Full name of user"
    name: String! @rules(apply: ["required", "min:1"])
    "Email address, should be unique, will be user for authorization"
    email: String! @rules(apply: ["email"])
    "Object path in Active Directory or OpenLDAP"
    object: String
    "Password of used, will be saved as hash into database"
    password: String! @rules(apply: ["required", "min:3"])
    "List of groups to which this object is related"
    groups: GroupsInput
}

"List of fields about which will be used for updating information about user"
input UserUpdateInput {
    "Full name of user"
    name: String
    "Email address, should be unique, will be user for authorization"
    email: String @rules(apply: ["email"])
    "Object path in Active Directory or OpenLDAP"
    object: String
    "Password of used, will be saved as hash into database"
    password: String
    "Additional inputs for group management"
    groups: GroupsInput
}

"Object with all required details about group"
type Group {
    "Unique ID of group"
    id: ID!
    "Name of group"
    name: String!
    "Object path in Active Directory or OpenLDAP"
    object: String
    "List of all users in this group"
    users: [User!]
    "Amount of users in group"
    users_count: Int
    "List of all servers trought which users in this group may authorize"
    servers: [Server!]
    "Amount of servers in group"
    servers_count: Int
    "When record was created"
    created_at: DateTime
    "When record was updated in last time"
    updated_at: DateTime
}

"List of fields which can be filled on group creating stage"
input GroupCreateInput {
    "Name of group"
    name: String! @rules(apply: ["required", "min:1"])
    "Object path in Active Directory or OpenLDAP"
    object: String
}

"List of fields about which will be used for updating information about group"
input GroupUpdateInput {
    "Name of group"
    name: String
    "Object path in Active Directory or OpenLDAP"
    object: String
}

"Object with all required details about server"
type Configuration {
    "Unique ID of configration"
    id: ID!
    "Array with list of all servers settings"
    settings: [String]
    "List of servers which used simmilar configuration"
    servers: [Server]
    "When record was created"
    created_at: DateTime
    "When record was updated in last time"
    updated_at: DateTime
}

"Object with all required details about server"
type Server {
    "Unique ID of server"
    id: ID!
    "Hostname of server"
    hostname: String!
    "Token which should be added to each query, by validation reasons"
    token: String
    "IPv4 of server"
    ipv4: String
    "IPv6 of server"
    ipv6: String
    "List of user groups which can login trougth this server"
    groups: [Group!]
    "List of all users which may connect to this server"
    users: [User!]
    "Hostname of server"
    configuration: Configuration
    "Amount of users in group"
    users_count: Int
    "When record was created"
    created_at: DateTime
    "When record was updated in last time"
    updated_at: DateTime
}

"List of fields which can be filled on server creating stage"
input ServerCreateInput {
    "Hostname of server"
    hostname: String!
    "Handshake token"
    token: String
    "IPv4 of server"
    ipv4: String
    "IPv6 of server"
    ipv6: String
    "Object path in Active Directory or OpenLDAP"
    object: String
    "Additional inputs for group management"
    groups: GroupsInput
}

"List of fields about which will be used for updating information about group"
input ServerUpdateInput {
    "Hostname of server"
    hostname: String
    "Handshake token"
    token: String
    "IPv4 of server"
    ipv4: String
    "IPv6 of server"
    ipv6: String
    "Object path in Active Directory or OpenLDAP"
    object: String
    "Additional inputs for group management"
    groups: GroupsInput
}

"Object with all required details about log message"
type Log {
    "Unique ID of log message"
    id: ID!
    "Code number of error for simplification"
    code: Int!
    "Body of message"
    message: String
    "Object of user who tirggeren this log message"
    user: User
    "On which server was the event"
    server: Server
    "When record was created"
    created_at: DateTime
    "When record was updated in last time"
    updated_at: DateTime
}

"List of fields which can be filled on log event creating stage"
input LogCreateInput {
    "Code number of error for simplification"
    code: Int!
    "Message body"
    message: String
    "User ID, which triggered this message"
    user_id: Int
    "Server ID, on which this message was triggered"
    server_id: Int
}

"List of fields about which will be used for updating information about log event"
input LogUpdateInput {
    "Code number of error for simplification"
    code: Int!
    "Message body"
    message: String
    "User ID, which triggered this message"
    user_id: Int
    "Server ID, on which this message was triggered"
    server_id: Int
}
